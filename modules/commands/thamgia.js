module.exports.config = {
    name: "thamgia",
    version: "1.0.0",
    hasPermssion: 2,
    credits: "cherry & DongDev fix",
    description: "Tham gia v√†o nh√≥m bot ƒëang ·ªü",
    commandCategory: "Admin",
    usages: "b·ªßh",
    cooldowns: 0,
    images: [],
    dependencies: {
        "request": "",
        "fs-extra": "",
        "axios": ""
    }
};

module.exports.handleReply = async ({ event, api, handleReply }) => {
    const { threadID, messageID, body, senderID } = event;
    const { threadList, author } = handleReply;

    if (senderID !== author) return;

    api.unsendMessage(handleReply.messageID);

    if (!body || !parseInt(body)) return api.sendMessage('‚ùé L·ª±a ch·ªçn c·ªßa b·∫°n ph·∫£i l√† m·ªôt s·ªë', threadID, messageID);

    const selectedThread = threadList[parseInt(body) - 1];

    if (!selectedThread) return api.sendMessage("‚ùé L·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng n·∫±m trong danh s√°ch", threadID, messageID);

    try {
        const { participantIDs, name, threadID: selectedThreadID } = selectedThread;

        if (participantIDs.includes(senderID)) return api.sendMessage('‚òëÔ∏è B·∫°n ƒë√£ c√≥ m·∫∑t trong nh√≥m n√†y r·ªìi', threadID, messageID);

        api.addUserToGroup(senderID, selectedThreadID, (error) => {
            if (error) api.sendMessage(`‚ùé ƒê√£ x·∫£y ra l·ªói: ${error.errorDescription}`, threadID, messageID);
            else api.sendMessage(`‚òëÔ∏è Bot ƒë√£ th√™m b·∫°n v√†o nh√≥m ${name}\nüìå Ki·ªÉm tra ·ªü m·ª•c spam ho·∫∑c tin nh·∫Øn ch·ªù n·∫øu kh√¥ng th·∫•y box`, threadID, messageID);
        });
    } catch (error) {
        api.sendMessage(`‚ùé L·ªói khi th√™m b·∫°n v√†o nh√≥m: ${error}`, threadID, messageID);
    }
};

module.exports.run = async function ({ api, event }) {
    const { threadID, senderID, messageID } = event;
  try {
        const allThreads = await api.getThreadList(100, null, ["INBOX"]);
        const groupThreads = allThreads.filter(thread => thread.isGroup);

        if (!groupThreads.length) return api.sendMessage("Kh√¥ng t√¨m th·∫•y nh√≥m n√†o.", threadID);

        let msg = `üìù Danh s√°ch t·∫•t c·∫£ c√°c nh√≥m b·∫°n c√≥ th·ªÉ tham gia:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;

        await Promise.all(groupThreads.map(async (thread, index) => {
            msg += `${index + 1}. ${thread.name}\n`;
        }));

        msg += `\nüìå Reply (ph·∫£n h·ªìi) STT ·ª©ng v·ªõi nh√≥m m√† b·∫°n mu·ªën v√†o`;

        api.sendMessage(msg, threadID, async (error, info) => {
        if (error) return console.error("Error sending message:", error);
            try {
                await global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: senderID,
                    threadList: groupThreads
                });
            } catch (err) {
                console.error("Error while pushing handleReply data:", err);
            }
        }, messageID);
    } catch (err) {
        console.error("Error while getting thread list:", err);
        api.sendMessage("‚ùé ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch nh√≥m", threadID, messageID);
    }
};