const fs = require('fs');

module.exports.config = {
    name: "allfile",
    version: "1.0.0",
    hasPermission: 0,
    credits: "DongDev",
    description: "Hi·ªÉn th·ªã danh s√°ch t·ªáp v√† th∆∞ m·ª•c trong th∆∞ m·ª•c hi·ªán t·∫°i.",
    usage: "",
    commandCategory: "Admin",
    cooldowns: 5
};

// H√†m m·ªü th∆∞ m·ª•c v√† g·ª≠i danh s√°ch file v√† folder
function openFolder(api, event, path) {
    const { readdirSync, statSync } = fs;
    const read = readdirSync(path);
    let txt = '';
    let count = 0;
    const array = [];

    for (const i of read) {
        const dest = `${path}/${i}`;
        const info = statSync(dest);
        const size = info.isDirectory() ? getFolderSize(dest) : info.size;

        txt += `${++count}. ${info.isFile() ? 'üìÑ' : info.isDirectory() ? 'üìÅ' : ''} - ${i}(${convertBytes(size)})\n`;
        array.push({
            dest,
            info
        });
    }

    txt += '\n--> Reply [Open|Del|View] + STT.';
    api.sendMessage(txt, event.threadID, (err, data) => {
        global.client.handleReply.push({
            name: 'file',
            messageID: data.messageID,
            author: event.senderID,
            data: array
        });
    }, event.messageID);
}

// H√†m chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc t·ªáp th√†nh ƒë∆°n v·ªã ƒë·ªçc ƒë∆∞·ª£c
function convertBytes(bytes) {
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 Byte';
    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return `${Math.round(bytes / Math.pow(1024, i), 2)} ${sizes[i]}`;
}

// H√†m l·∫•y k√≠ch th∆∞·ªõc c·ªßa th∆∞ m·ª•c
function getFolderSize(path) {
    const stats = fs.statSync(path);
    if (!stats.isDirectory()) {
        return stats.size;
    }
    const items = fs.readdirSync(path);
    let size = 0;
    items.forEach(item => {
        size += getFolderSize(`${path}/${item}`);
    });
    return size;
}

// H√†m x·ª≠ l√Ω khi reply
module.exports.handleReply = async function ({ event, api, handleReply, args }) {
    const { threadID: tid, messageID: mid } = event;

    if (!handleReply || !handleReply.data) {
        return; // Tr√°nh x·ª≠ l√Ω khi handleReply ho·∫∑c data kh√¥ng t·ªìn t·∫°i
    }

    switch (handleReply.name) {
        case 'file':
            const arg = args[0]; // L·∫•y gi√° tr·ªã args
            const choose = parseInt(arg); // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë nguy√™n
            api.unsendMessage(handleReply.messageID);

            if (isNaN(choose) || choose <= 0 || choose > handleReply.data.length) {
                return api.sendMessage('‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.', tid, mid);
            }

            const chosenItem = handleReply.data[choose - 1];
            const dest = chosenItem.dest;
            const info = chosenItem.info;

            if (info.isDirectory()) {
                openFolder(api, event, dest); // M·ªü th∆∞ m·ª•c n·∫øu l√† th∆∞ m·ª•c
            } else {
                // X·ª≠ l√Ω khi l√† t·ªáp
                api.sendMessage(`B·∫°n ƒë√£ ch·ªçn t·ªáp: ${dest}`, tid, mid);
            }
            break;

        default:
            break;
    }
};

// H√†m ch·∫°y khi g·ªçi l·ªánh
module.exports.run = async function({ event, api }) {
    const directoryPath = './'; // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c b·∫°n mu·ªën ki·ªÉm tra
    openFolder(api, event, directoryPath);
};
