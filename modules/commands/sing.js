const fs = require('fs');
const ytdl = require('ytdl-core');
const { resolve } = require('path');
const moment = require("moment-timezone");

async function getdl(link, path) {
    var timestart = Date.now();
    if (!link) return 'Thi·∫øu link';
    var resolveFunc = function () { };
    var rejectFunc = function () { };
    var returnPromise = new Promise(function (resolve, reject) {
        resolveFunc = resolve;
        rejectFunc = reject;
    });
    ytdl(link, {
        filter: format =>
            format.quality == 'tiny' && format.audioBitrate == 128 && format.hasAudio == true
    }).pipe(fs.createWriteStream(path))
        .on("close", async () => {
            var data = await ytdl.getInfo(link);
            var result = {
                title: data.videoDetails.title,
                dur: Number(data.videoDetails.lengthSeconds),
                viewCount: data.videoDetails.viewCount,
                likes: data.videoDetails.likes,
                uploadDate: data.videoDetails.uploadDate,
                sub: data.videoDetails.author.subscriber_count,
                author: data.videoDetails.author.name,
                timestart: timestart
            };
            resolveFunc(result);
        });
    return returnPromise;
}

module.exports.config = {
    name: "sing",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "D-Jukie",
    description: "Ph√°t nh·∫°c th√¥ng qua t·ª´ kho√° t√¨m ki·∫øm tr√™n YouTube",
    commandCategory: "Ti·ªán √≠ch",
    usages: "[searchMusic]",
    cooldowns: 0,
    images: [],
};

module.exports.config = {
    name: "sing",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "D-Jukie",
    description: "Ph√°t nh·∫°c th√¥ng qua t·ª´ kho√° t√¨m ki·∫øm tr√™n YouTube",
    commandCategory: "Ti·ªán √≠ch",
    usages: "[searchMusic]",
    cooldowns: 0,
    images: [],
};

module.exports.handleReply = async function ({ api, event, handleReply }) {
    const axios = require('axios');
    const { createReadStream, unlinkSync, statSync } = require("fs-extra");
    const id = handleReply.link[event.body - 1];
   try {
        var path = `${__dirname}/cache/sing-${event.senderID}.mp3`;
        var data = await getdl(`https://www.youtube.com/watch?v=${id}`, path);      
   if (fs.statSync(path).size > 26214400) {
            return api.sendMessage('‚ùé File qu√° l·ªõn, vui l√≤ng ch·ªçn b√†i kh√°c!', event.threadID, () => fs.unlinkSync(path), event.messageID);
        }
    api.unsendMessage(handleReply.messageID);
        return api.sendMessage({
            body: `[ √Çm Nh·∫°c T·ª´ YouTube ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n|‚Ä∫ üé¨ Title: ${data.title}\n|‚Ä∫ ‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${convertHMS(data.dur)} gi√¢y\n|‚Ä∫ üóìÔ∏è Ng√†y t·∫£i l√™n: ${data.uploadDate}\n|‚Ä∫ üë§ T√™n k√™nh: ${data.author} (${data.sub})\n|‚Ä∫ üåê L∆∞·ª£t xem: ${data.viewCount}\n|‚Ä∫ üì• Link t·∫£i: https://www.youtubepp.com/watch?v=${id}\n|‚Ä∫ ‚è≥ Th·ªùi gian x·ª≠ l√Ω: ${Math.floor((Date.now() - data.timestart) / 1000)} gi√¢y\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n|‚Ä∫ ‚è∞ Time: ${moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss | DD/MM/YYYY")}`,
            attachment: createReadStream(path)
        }, event.threadID, () => fs.unlinkSync(path), event.messageID);

    } catch (e) {
        console.log(e);
      }
};

function convertHMS(value) {
    const sec = parseInt(value, 10); 
    let hours   = Math.floor(sec / 3600);
    let minutes = Math.floor((sec - (hours * 3600)) / 60); 
    let seconds = sec - (hours * 3600) - (minutes * 60); 
    if (hours   < 10) {hours   = "0"+hours;}
    if (minutes < 10) {minutes = "0"+minutes;}
    if (seconds < 10) {seconds = "0"+seconds;}
    return (hours != '00' ? hours +':': '') + minutes+':'+seconds;
}

module.exports.run = async function ({ api, event, args }) {
    if (args.length == 0 || !args) return api.sendMessage('‚ùé Ph·∫ßn t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!', event.threadID, event.messageID);
    const keywordSearch = args.join(" ");
    const path = `${__dirname}/cache/sing-${event.senderID}.mp3`;
    if (fs.existsSync(path)) {
        fs.unlinkSync(path);
    }
    try {
        const link = [];
        const Youtube = require('youtube-search-api');
        const data = (await Youtube.GetListByKeyword(keywordSearch, false, 8)).items;
        const msg = data.map((value, index) => {
            link.push(value.id);
            return `|‚Ä∫ ${index + 1}. ${value.title}\n|‚Ä∫ üë§ K√™nh: ${value.channelTitle}\n|‚Ä∫ ‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${value.length.simpleText}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
        }).join('\n');
        return api.sendMessage(`üìù C√≥ ${link.length} k·∫øt qu·∫£ tr√πng v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm c·ªßa b·∫°n:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${msg}\n\nüìå Reply (ph·∫£n h·ªìi) STT ƒë·ªÉ t·∫£i nh·∫°c`, event.threadID, (error, info) => global.client.handleReply.push({
            type: 'reply',
            name: this.config.name,
            messageID: info.messageID,
            author: event.senderID,
            link
        }), event.messageID);
    } catch (e) {
        return api.sendMessage('‚ùé ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau!\n' + e, event.threadID, event.messageID);
    }
};